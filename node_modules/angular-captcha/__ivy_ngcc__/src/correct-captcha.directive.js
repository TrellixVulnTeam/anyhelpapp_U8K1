"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var forms_1 = require("@angular/forms");
var captcha_service_1 = require("./captcha.service");
var ɵngcc0 = require('@angular/core');
var ɵngcc1 = require('./captcha.service');
var CorrectCaptchaDirective = /** @class */ (function () {
    function CorrectCaptchaDirective(captchaService) {
        this.captchaService = captchaService;
    }
    CorrectCaptchaDirective.prototype.validate = function (c, onBlur) {
        var _this = this;
        if (c) {
            // cache the control for using on blur
            this.control = c;
        }
        return new Promise(function (resolve) {
            // the control should have incorrect status first
            resolve({ incorrectCaptcha: true });
            // we only validate the captcha on blur
            if (onBlur) {
                var captchaCode = _this.captchaService.botdetectInstance.userInput.value;
                if (captchaCode) {
                    _this.captchaService.validateUnsafe(captchaCode)
                        .subscribe(function (isHuman) {
                        if (!isHuman) {
                            // ui captcha validation failed
                            _this.captchaService.botdetectInstance.reloadImage();
                            _this.control = null;
                        }
                        else {
                            // ui captcha validation passed
                            _this.control.setErrors(null);
                        }
                    }, function (error) {
                        throw new Error(error);
                    });
                }
            }
        });
    };
    CorrectCaptchaDirective.prototype.onBlur = function () {
        this.validate(undefined, true);
    };
    /** @nocollapse */
    CorrectCaptchaDirective.ctorParameters = function () { return [
        { type: captcha_service_1.CaptchaService, },
    ]; };
    CorrectCaptchaDirective.propDecorators = {
        'onBlur': [{ type: core_1.HostListener, args: ['blur',] },],
    };
CorrectCaptchaDirective.ɵfac = function CorrectCaptchaDirective_Factory(t) { return new (t || CorrectCaptchaDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CaptchaService)); };
CorrectCaptchaDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CorrectCaptchaDirective, selectors: [["", "correctCaptcha", "", "formControlName", ""], ["", "correctCaptcha", "", "formControl", ""], ["", "correctCaptcha", "", "ngModel", ""]], hostBindings: function CorrectCaptchaDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("blur", function CorrectCaptchaDirective_blur_HostBindingHandler() { return ctx.onBlur(); });
    } }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: forms_1.NG_ASYNC_VALIDATORS,
                useExisting: core_1.forwardRef(function () { return CorrectCaptchaDirective; }),
                multi: true
            }
        ])] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CorrectCaptchaDirective, [{
        type: core_1.Directive,
        args: [{
                selector: '[correctCaptcha][formControlName],[correctCaptcha][formControl],[correctCaptcha][ngModel]',
                providers: [
                    {
                        provide: forms_1.NG_ASYNC_VALIDATORS,
                        useExisting: core_1.forwardRef(function () { return CorrectCaptchaDirective; }),
                        multi: true
                    }
                ]
            }]
    }], function () { return [{ type: ɵngcc1.CaptchaService }]; }, { onBlur: [{
            type: core_1.HostListener,
            args: ['blur']
        }] }); })();
    return CorrectCaptchaDirective;
}());
exports.CorrectCaptchaDirective = CorrectCaptchaDirective;

//# sourceMappingURL=correct-captcha.directive.js.map