{"version":3,"file":"captcha.component.js","sources":["captcha.component.js"],"names":[],"mappingsoBAAM;AACN;AACA;AACA;AACA","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar core_1 = require(\"@angular/core\");\r\nvar captcha_service_1 = require(\"./captcha.service\");\r\nvar captcha_helper_service_1 = require(\"./captcha-helper.service\");\r\nvar CaptchaComponent = /** @class */ (function () {\r\n    function CaptchaComponent(elementRef, captchaService, captchaHelper) {\r\n        this.elementRef = elementRef;\r\n        this.captchaService = captchaService;\r\n        this.captchaHelper = captchaHelper;\r\n    }\r\n    Object.defineProperty(CaptchaComponent.prototype, \"captchaEndpoint\", {\r\n        // provide captchaEndpoint for getting captcha challenge.\r\n        set: function (captchaEndpoint) {\r\n            this.captchaService.captchaEndpoint = captchaEndpoint;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CaptchaComponent.prototype, \"captchaId\", {\r\n        // the current captcha id, which will be used for validation purpose.\r\n        get: function () {\r\n            return this.captchaService.botdetectInstance.captchaId;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CaptchaComponent.prototype, \"captchaCode\", {\r\n        // the user entered captcha code value.\r\n        // keep this method for backward compatibility\r\n        get: function () {\r\n            return this.captchaService.botdetectInstance.userInput.value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CaptchaComponent.prototype, \"userEnteredCaptchaCode\", {\r\n        get: function () {\r\n            return this.captchaCode;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    // display captcha html markup on component initialization.\r\n    CaptchaComponent.prototype.ngOnInit = function () {\r\n        this.captchaStyleName = this.getCaptchaStyleName();\r\n        // set captcha style name to CaptchaService for creating BotDetect object\r\n        this.captchaService.captchaStyleName = this.captchaStyleName;\r\n        // display captcha html markup on view\r\n        this.displayHtml();\r\n    };\r\n    // get captcha style name.\r\n    CaptchaComponent.prototype.getCaptchaStyleName = function () {\r\n        var styleName;\r\n        styleName = this.captchaStyleName;\r\n        if (styleName) {\r\n            return styleName;\r\n        }\r\n        // backward compatible\r\n        styleName = this.styleName;\r\n        if (styleName) {\r\n            return styleName;\r\n        }\r\n        throw new Error('The captchaStyleName attribute is not found or its value is not set.');\r\n    };\r\n    // display captcha html markup in the <botdetect-captcha> tag.\r\n    CaptchaComponent.prototype.displayHtml = function () {\r\n        var _this = this;\r\n        this.captchaService.getHtml()\r\n            .subscribe(function (captchaHtml) {\r\n            // display captcha html markup\r\n            captchaHtml = _this.captchaHelper.changeRelativeToAbsoluteUrls(captchaHtml, _this.captchaService.captchaEndpoint);\r\n            _this.elementRef.nativeElement.innerHTML = captchaHtml;\r\n            // load botdetect scripts\r\n            _this.loadScriptIncludes();\r\n        }, function (error) {\r\n            throw new Error(error);\r\n        });\r\n    };\r\n    // reload a new captcha image.\r\n    CaptchaComponent.prototype.reloadImage = function () {\r\n        this.captchaService.botdetectInstance.reloadImage();\r\n    };\r\n    // validate captcha on client-side and execute user callback function on ajax success\r\n    CaptchaComponent.prototype.validateUnsafe = function (callback) {\r\n        var _this = this;\r\n        var userInput = this.captchaService.botdetectInstance.userInput;\r\n        var captchaCode = userInput.value;\r\n        if (captchaCode.length !== 0) {\r\n            this.captchaService.validateUnsafe(captchaCode)\r\n                .subscribe(function (isHuman) {\r\n                callback(isHuman);\r\n                if (!_this.captchaHelper.useUserInputBlurValidation(userInput) && !isHuman) {\r\n                    _this.reloadImage();\r\n                }\r\n            }, function (error) {\r\n                throw new Error(error);\r\n            });\r\n        }\r\n        else {\r\n            var isHuman = false;\r\n            callback(isHuman);\r\n        }\r\n    };\r\n    // load botdetect scripts.\r\n    CaptchaComponent.prototype.loadScriptIncludes = function () {\r\n        var captchaId = this.elementRef.nativeElement.querySelector('#BDC_VCID_' + this.captchaStyleName).value;\r\n        var scriptIncludeUrl = this.captchaService.captchaEndpoint + '?get=script-include&c=' + this.captchaStyleName + '&t=' + captchaId + '&cs=201';\r\n        this.captchaHelper.getScript(scriptIncludeUrl);\r\n    };\r\n    CaptchaComponent.decorators = [\r\n        { type: core_1.Component, args: [{\r\n                    selector: 'botdetect-captcha',\r\n                    template: ''\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    CaptchaComponent.ctorParameters = function () { return [\r\n        { type: core_1.ElementRef, },\r\n        { type: captcha_service_1.CaptchaService, },\r\n        { type: captcha_helper_service_1.CaptchaHelperService, },\r\n    ]; };\r\n    CaptchaComponent.propDecorators = {\r\n        'styleName': [{ type: core_1.Input },],\r\n        'captchaStyleName': [{ type: core_1.Input },],\r\n    };\r\n    return CaptchaComponent;\r\n}());\r\nexports.CaptchaComponent = CaptchaComponent;\r\n"]}